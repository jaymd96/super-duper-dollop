// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenApiClient.Typed.Models
{
    /// <summary>
    /// A single search result document
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SearchDoc : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of author keys</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorKey { get; set; }
#nullable restore
#else
        public List<string> AuthorKey { get; set; }
#endif
        /// <summary>Array of author names</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorName { get; set; }
#nullable restore
#else
        public List<string> AuthorName { get; set; }
#endif
        /// <summary>Cover image ID</summary>
        public int? CoverI { get; set; }
        /// <summary>Number of editions available</summary>
        public int? EditionCount { get; set; }
        /// <summary>Year of first publication</summary>
        public int? FirstPublishYear { get; set; }
        /// <summary>List of ISBNs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Isbn { get; set; }
#nullable restore
#else
        public List<string> Isbn { get; set; }
#endif
        /// <summary>Open Library work key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Available languages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Language { get; set; }
#nullable restore
#else
        public List<string> Language { get; set; }
#endif
        /// <summary>List of publishers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Publisher { get; set; }
#nullable restore
#else
        public List<string> Publisher { get; set; }
#endif
        /// <summary>Book subjects/categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Subject { get; set; }
#nullable restore
#else
        public List<string> Subject { get; set; }
#endif
        /// <summary>Title of the work</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::OpenApiClient.Typed.Models.SearchDoc"/> and sets the default values.
        /// </summary>
        public SearchDoc()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenApiClient.Typed.Models.SearchDoc"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::OpenApiClient.Typed.Models.SearchDoc CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenApiClient.Typed.Models.SearchDoc();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "author_key", n => { AuthorKey = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "author_name", n => { AuthorName = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cover_i", n => { CoverI = n.GetIntValue(); } },
                { "edition_count", n => { EditionCount = n.GetIntValue(); } },
                { "first_publish_year", n => { FirstPublishYear = n.GetIntValue(); } },
                { "isbn", n => { Isbn = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "language", n => { Language = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "publisher", n => { Publisher = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "subject", n => { Subject = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("author_key", AuthorKey);
            writer.WriteCollectionOfPrimitiveValues<string>("author_name", AuthorName);
            writer.WriteIntValue("cover_i", CoverI);
            writer.WriteIntValue("edition_count", EditionCount);
            writer.WriteIntValue("first_publish_year", FirstPublishYear);
            writer.WriteCollectionOfPrimitiveValues<string>("isbn", Isbn);
            writer.WriteStringValue("key", Key);
            writer.WriteCollectionOfPrimitiveValues<string>("language", Language);
            writer.WriteCollectionOfPrimitiveValues<string>("publisher", Publisher);
            writer.WriteCollectionOfPrimitiveValues<string>("subject", Subject);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
