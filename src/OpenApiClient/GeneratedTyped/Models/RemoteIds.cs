// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenApiClient.Typed.Models
{
    /// <summary>
    /// External identifiers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RemoteIds : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amazon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amazon { get; set; }
#nullable restore
#else
        public string Amazon { get; set; }
#endif
        /// <summary>The goodreads property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Goodreads { get; set; }
#nullable restore
#else
        public string Goodreads { get; set; }
#endif
        /// <summary>The imdb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imdb { get; set; }
#nullable restore
#else
        public string Imdb { get; set; }
#endif
        /// <summary>The isni property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Isni { get; set; }
#nullable restore
#else
        public string Isni { get; set; }
#endif
        /// <summary>The librarything property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Librarything { get; set; }
#nullable restore
#else
        public string Librarything { get; set; }
#endif
        /// <summary>The musicbrainz property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Musicbrainz { get; set; }
#nullable restore
#else
        public string Musicbrainz { get; set; }
#endif
        /// <summary>The project_gutenberg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectGutenberg { get; set; }
#nullable restore
#else
        public string ProjectGutenberg { get; set; }
#endif
        /// <summary>The viaf property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Viaf { get; set; }
#nullable restore
#else
        public string Viaf { get; set; }
#endif
        /// <summary>The wikidata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Wikidata { get; set; }
#nullable restore
#else
        public string Wikidata { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::OpenApiClient.Typed.Models.RemoteIds"/> and sets the default values.
        /// </summary>
        public RemoteIds()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenApiClient.Typed.Models.RemoteIds"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::OpenApiClient.Typed.Models.RemoteIds CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenApiClient.Typed.Models.RemoteIds();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amazon", n => { Amazon = n.GetStringValue(); } },
                { "goodreads", n => { Goodreads = n.GetStringValue(); } },
                { "imdb", n => { Imdb = n.GetStringValue(); } },
                { "isni", n => { Isni = n.GetStringValue(); } },
                { "librarything", n => { Librarything = n.GetStringValue(); } },
                { "musicbrainz", n => { Musicbrainz = n.GetStringValue(); } },
                { "project_gutenberg", n => { ProjectGutenberg = n.GetStringValue(); } },
                { "viaf", n => { Viaf = n.GetStringValue(); } },
                { "wikidata", n => { Wikidata = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amazon", Amazon);
            writer.WriteStringValue("goodreads", Goodreads);
            writer.WriteStringValue("imdb", Imdb);
            writer.WriteStringValue("isni", Isni);
            writer.WriteStringValue("librarything", Librarything);
            writer.WriteStringValue("musicbrainz", Musicbrainz);
            writer.WriteStringValue("project_gutenberg", ProjectGutenberg);
            writer.WriteStringValue("viaf", Viaf);
            writer.WriteStringValue("wikidata", Wikidata);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
